npm install webpack webpack-cli -D

npx webpack --mode production
npx webpack --mode development
npx webpack --mode production --config webpack.config.js
npm install -D babel-loader @babel/core @babel/preset-env @babel/plugin-transform-runtime
npm i html-webpack-plugin -D
npm i mini-css-extract-plugin css-loader -D
npm i node-sass sass-loader -D 
npm i copy-webpack-plugin -D
npm i url-loader file-loader -D
npm i css-minimizer-webpack-plugin terser-webpack-plugin -D
npm i dotenv-webpack -D
npm i clean-webpack-plugin -D
/*
npm install -D babel-loader @babel/core @babel/preset-env @babel/plugin-transform-runtime
Yarn

yarn add -D babel-loader @babel/core @babel/preset-env @babel/plugin-transform-runtime
babel-loader nos permite usar babel con webpack
@babel/core es babel en general
@babel/preset-env trae y te permite usar las ultimas características de JavaScript
@babel/plugin-transform-runtime te permite trabajar con todo el tema de asincronismo como ser async y await
Debes crear el archivo de configuración de babel el cual tiene como nombre .babelrc

{
  "presets": [
    "@babel/preset-env"
  ],
  "plugins": [
    "@babel/plugin-transform-runtime"
  ]
}
Para comenzar a utilizar webpack debemos agregar la siguiente configuración en webpack.config.js

{
...,
module: {
    rules: [
      {
        // Test declara que extensión de archivos aplicara el loader
        test: /\.js$/,
        // Use es un arreglo u objeto donde dices que loader aplicaras
        use: {
          loader: "babel-loader"
        },
        // Exclude permite omitir archivos o carpetas especificas
        exclude: /node_modules/
      }
    ]
  }
}
*/